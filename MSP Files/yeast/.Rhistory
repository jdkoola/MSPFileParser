source('~/Dropbox/My Documents/DBMI Masters/Fall 2013/bios 311/Quiz 6/Quiz6-3.R')
TtestPower
AnovaPower
source('~/Dropbox/My Documents/DBMI Masters/Fall 2013/bios 311/Quiz 6/Quiz6-3.R')
source('~/Dropbox/My Documents/DBMI Masters/Fall 2013/bios 311/Quiz 6/Quiz6-3.R')
type2ErrorForMultipleTs
mean(type2ErrorForMultipleTs)
1-mean(type2ErrorForMultipleTs)
tTestAvsB
tTestAvsC
tTestAvsC>=0.05
mean(tTestAvsC>=0.05)
1-mean(tTestAvsC>=0.05)
powerForMultipleTs<-1-mean(type2ErrorForMultipleTs);
powerForAvsC      <-1-mean(tTestAvsC>=0.05)
powerForAvsB      <-1-mean(tTestAvsB>=0.05)
powerForBvsC      <-1-mean(tTestBvsC>=0.05)
powerForBvsC
powerForAvsB
powerForAvsC
powerForMultipleTs
fwerForAnova
fwerForAnova>=0.05
mean(fwerForAnova>=0.05)
1-mean(fwerForAnova>=0.05)
1-mean(fwerForMultipleTs)
powerForMultipleTs
powerForAnova
powerForAnova     <-1-mean(fwerForAnova>=0.05)
powerForAnova
source('~/Dropbox/My Documents/DBMI Masters/Fall 2013/bios 311/Quiz 6/Quiz6-3.R')
source('~/Dropbox/My Documents/DBMI Masters/Fall 2013/bios 311/Quiz 6/Quiz6-3.R')
source('~/Dropbox/My Documents/DBMI Masters/Fall 2013/bios 311/Quiz 6/Quiz6-3.R')
type2ErrorPostHocAvsB
mean(type2ErrorPostHocAvsB)
1-mean(type2ErrorPostHocAvsB)
1-mean(type2ErrorPostHocBvsC)
powerForPostHocBvsC <- 1-mean(type2ErrorPostHocBvsC)
powerForPostHocAvsC <- 1-mean(type2ErrorPostHocAvsC)
powerForPostHocAvsB <- 1-mean(type2ErrorPostHocAvsB)
powerForPostHocAvsB
powerForPostHocAvsC
powerForPostHocBvsC
powerForAvsC
powerForBvsC
library(bnlearn)
LETTERS[1:6]
e=empty.graph(LETTERS[1:6])
e
plot(e)
arc.set=matrix(c("A", "C", "B", "F", "C", "F"), ncol=2, byrow=TRUE)
arc.set
arcs(e) <- arc.set
plot(e)
e
matrix(0, ncol=6, nrow=6)
matrix(0, ncol=6, nrow=6, dimnames=list(LETTERS[1:6], LETTERS[1:6]))
adj<-matrix(0, ncol=6, nrow=6, dimnames=list(LETTERS[1:6], LETTERS[1:6]))
adj
adj[1,1]
adj[1,3]=1
adj
adj[2,6]=1
adj
adj[3,6]=1
adj
adj[4,5]=1
adj
adj[1,5]=1
amat(e)<-adj
e
plot(e)
model2network("[A][B][D][C|A][E|A:D][F|B:C]")
model2network("[A][B][D][C|A][E|A:D][FAST|B:C]")
plot(model2network("[A][B][D][C|A][E|A:D][FAST|B:C]"))
random.graph(LETTERS[1:6],num=1)
plot(random.graph(LETTERS[1:6],num=1))
plot(random.graph(LETTERS[1:6],num=1))
plot(random.graph(LETTERS[1:6],num=1))
plot(random.graph(LETTERS[1:6],num=1, method="ic-dag"))
plot(random.graph(LETTERS[1:6],num=1, method="ic-dag"))
plot(random.graph(LETTERS[1:6],num=1, method="melancon"))
plot(random.graph(LETTERS[1:6],num=1, method="melancon"))
plot(random.graph(LETTERS[1:6],num=1, method="melancon"))
data(gaussian.test)
gaussian.test
head
head(gaussian.test)
gaussianTestNetwork<-empty.graph(names(gaussian.test))
gaussianTestNetwork
score(res, gaussian.test, type="bic-g")
score(gaussianTestNetwork, gaussian.test, type="bic-g")
score(gaussianTestNetwork, gaussian.test, type="bic-g")
score(gaussianTestNetwork, gaussian.test, type="bic-g")
plot(gaussianTestNetwork)
modelstring(gaussianTestNetwork) <- "[A][B][E][G][C|A:B][D|B][F|A:D:E:G]"
plot(gaussianTestNetwork)
score(gaussianTestNetwork, gaussian.test)
newNetworkWithArcChange<-set.arc(gaussianTestNetwork, "D", "B")
plot(newN)
plot(newNetworkWithArcChange)
newNetworkWithArcChange<-set.arc(gaussianTestNetwork, "C", "B")
plot(newNetworkWithArcChange)
choose.direction(gaussianTestNetwork, data=gaussian.test, c("B", "D"), debug=TRUE)
choose.direction(gaussianTestNetwork, data=gaussian.test, c("B", "D"), debug=TRUE, criterion="bic-g")
gaussianTestNetwork<-empty.graph(names(gaussian.test))
plot(gaussianTestNetwork)
choose.direction(gaussianTestNetwork, data=gaussian.test, c("B", "D"), debug=TRUE, criterion="bic-g")
choose.direction(gaussianTestNetwork, data=gaussian.test, c("B", "C"), debug=TRUE, criterion="bic-g")
gaussianTestNetwork<-set.arc(gaussianTestNetwork, "A", "B")
choose.direction(gaussianTestNetwork, data=gaussian.test, c("A", "B"), debug=TRUE, criterion="bic-g")
choose.direction(gaussianTestNetwork, data=gaussian.test, c("B", "D"), debug=TRUE, criterion="bic-g")
?attach
gaussianTestNetwork
gaussianTestNetwork<-empty.graph(names(gaussian.test))
plot(gaussianTestNetwork)
learnedGaussianTestNetwork<- iamb(gaussian.test)
plot(learnedGaussianTestNetwork)
data(lizards)
lizardNetwork<-empty.graph(names(lizards))
plot(lizardNetwork)
ci.test("Height", "Diameter", "Species", data=lizards)
lizards
factors(lizards)
factor(lizards)
lizards[1,]
factor(lizards)
factor(lizards[,1])
lizardSpeciesFactor <- factor(lizards[,1])
lizardSpeciesFactor
levels(lizardSpeciesFactor) <- c('S', 'D')
lizardSpeciesFactor
table(lizardSpeciesFactor)
ci.test(lizards)
?attach
ci.test(lizards$Diameter, lizards$Height, lizards$Species, test='mc-x2')
?ci.test
plot(gaussianTestNetwork)
iamb(gaussianTestNetwork)
plot(learnedGaussianTestNetwork)
?ci.test
ci.test(x="F", y="B", z=c("C", "D"), data=gaussian.test)
plot(learnedGaussianTestNetwork)
ci.test(x="F", y="B", z="D", data=gaussian.test)
ci.test(x="F", y="C", z="A", data=gaussian.test)
?ci.test
data(learning.test)
learnedLearningTestNetwork <- iamb(learning.test)
plot(learnedLearningTestNetwork)
ci.test(x=learning.test$E, y=learning.test$F, z=learning.test$B)
score(set.arc(learnedLearningTestNetwork, "A", "B"), learning.test)
score(set.arc(learnedLearningTestNetwork, "B", "A"), learning.test)
choose.direction(learnedLearningTestNetwork, c("A", "B"), data=learning.test, criterion="k2")
plot(learnedLearningTestNetwork)
choose.direction(learnedLearningTestNetwork, c("A", "B"), data=learning.test, criterion="k2")
?choose.direction
choose.direction(learnedLearningTestNetwork, c("A", "B"), data=learning.test, criterion="k2", debug=TRUE)
fullyDAGofLearningTest<-choose.direction(learnedLearningTestNetwork, c("A", "B"), data=learning.test, criterion="k2", debug=TRUE)
plot(fullyDAGofLearningTest)
cptEstimate<-bn.fit(fullyDAGofLearningTest, learning.test)
cptEstimate
learning.test$B
sum(learning.test$B)
summary(learning.test$B)
2362/5000
cptEstimate$A
summary(learning.test$A)
1668/5000
1670/5000
1662/5000
bn.fit.barchart(fit$D)
bn.fit.barchart(fullyDAGofLearningTest$D)
bn.fit.barchart(cptEstimate$D)
imaginaryData<-cbind(gaussian.test, learning.test$A)
imaginaryDAta
imaginaryData
newNetwork<-iamb(imaginaryData)
newCol<-learning.test$F
newCol
newCol<-learning.test$E
newCol
numericNewCol<-factor(newCol, labels=c(1,2,3))
numericNewCol
imaginaryData<-cbind(gaussian.test, numericNewCol)
iamb(imaginaryData)
imaginaryData<-cbind(gaussian.test, seq(1:5000))
imaginaryData
iamb(imaginaryData)
imaginaryData$F
imaginaryData$g
imaginaryData$G
imaginaryData$H
imaginaryData[,8]
as.float
as.real
as.double
as.double(imaginaryData[,8])
library(bnlearn)
## discrete Bayesian network (it's the same with ordinal nodes).
data(learning.test)
fitted = bn.fit(hc(learning.test), learning.test)
# the result should be around 0.025.
cpquery(fitted, (B == "b"), (A == "a"))
# for a single observation, predict the value of a single
# variable conditional on the others.
var = names(learning.test)
obs = 2
str = paste("(", names(learning.test)[-3], "=='",
sapply(learning.test[obs,-3], as.character), "')",
sep = "", collapse = " & ")
str
str2 = paste("(", names(learning.test)[3], "=='",
as.character(learning.test[obs, 3]), "')", sep = "")
str2
cpquery(fitted, eval(parse(text = str2)), eval(parse(text = str)))
# do the same with likelihood weighting
cpquery(fitted, event = eval(parse(text = str2)),
evidence = as.list(learning.test[2, -3]), method = "lw")
# conditional distribution of A given C == "c".
table(cpdist(fitted, "A", (C == "c")))
plot(fitted)
plot(hc(learning.test))
fitted$B
data<-read.csv("/Users/johndoe/NetBeansProjects/MSP File Parser/MSP Files/one-peptide-b2mg.output")
data
summary(data)
data<-read.csv("/Users/johndoe/NetBeansProjects/MSP File Parser/MSP Files/one-peptide-b2mg.output")
data
levels(data)
summary(data)
load("~/NetBeansProjects/MSP File Parser/MSP Files/yeast/chicken.data.filtered.RData")
summary(chicken.data)
predict<-sample(c(0,1), 20, replace=T)
predict
truesample<-sample(c(0,1), 20, replace=T)
truesample
retrieved<-sum(predict)
recision<-sum(predict & truesample) / retrieved
recision
load("~/NetBeansProjects/MSP File Parser/MSP Files/yeast/yeast-sigma-workspace-mlsfit.RData")
sigma.tan.pred.table
?write.csv
setwd("~/NetBeansProjects/MSP File Parser/MSP Files/yeast")
write.csv(sigma.tan.pred)
write.csv(sigma.tan.pred.table)
plot(yeast.tan)
library(bnlearn)
plot(yeast.tan)
yeast.tan.cv<-bn.cv(yeast.data, yeast.tan, loss='pred', k=5, loss.args=list(target='ION_TYPE'), debug=TRUE)
yeast.tan.cv[[1]]
yeast.net.aic.cv<-bn.cv(yeast.data, algorithm.args=list(score='aic'), debug=TRUE)
yeast.net.aic.cv<-bn.cv(yeast.data, algorithm.args=list(score='aic'), debug=TRUE)
yeast.net.aic.cv<-bn.cv(yeast.data, 'hc', algorithm.args=list(score='aic'), debug=TRUE)
?boxplot
yeast.net.aic.cv[[1]].loss
yeast.net.aic.cv[[1]]$loss
yeast.net.aic.cv[[1:10]]$loss
for (i in 1:10) {}
for (i in 1:10) {
print (yeast.net.aic.cv[[i]]$loss)
}
yeast.net.bde.cv<-bn.cv(yeast.data, 'hc', algorithm.args=list(score='bde'), debug=TRUE)
for (i in 1:10) {
print (yeast.net.bde.cv[[i]]$loss)
}
yeast.net.bic.cv<-bn.cv(yeast.data, 'hc', algorithm.args=list(score='bic'), debug=TRUE)
yeast.net.bic.cv$loss
yeast.net.bic.cv[[1]]loss
yeast.net.bic.cv[[1]]$loss
for (i in 1:10) {
yeast.net.bic.cv.loss<-rbind(yeast.net.bic.cv.loss, yeast.net.bic.cv[[i]]$loss)
}
yeast.net.bic.cv.loss<-array()
for (i in 1:10) {
yeast.net.bic.cv.loss<-rbind(yeast.net.bic.cv.loss, yeast.net.bic.cv[[i]]$loss)
}
yeast.net.bic.cv.loss
yeast.net.aic.cv.loss<-array()
for (i in 1:10) {}
for (i in 1:10) {
yeast.net.aic.cv.loss<-rbind(yeast.net.aic.cv.loss, yeast.net.aic.cv[[i]]$loss)
}
yeast.net.aic.cv.loss
for (i in 1:10) {
yeast.net.bde.cv.loss<-rbind(yeast.net.bde.cv.loss, yeast.net.bde.cv[[i]]$loss)
}
yeast.net.bde.cv.loss<-array()
for (i in 1:10) {
yeast.net.bde.cv.loss<-rbind(yeast.net.bde.cv.loss, yeast.net.bde.cv[[i]]$loss)
}
?boxplot
boxplots<-list(bic=yeast.net.bic.cv.loss[2:], aic=yeast.net.aic.cv.loss[2:], bde=yeast.net.bde.cv.loss[2:])
yeast.net.bic.cv.loss[2:]
yeast.net.bic.cv.loss[2:11]
boxplots<-list(bic=yeast.net.bic.cv.loss[2:11], aic=yeast.net.aic.cv.loss[2:11], bde=yeast.net.bde.cv.loss[2:11])
boxplot(boxplots)
?boxplot
boxplot(boxplots, ylim=c(15,17))
boxplot(boxplots, ylim=c(16.3,16.8))
boxplot(boxplots, ylim=c(16.3,16.6))
boxplot(boxplots, ylim=c(16.3,16.6), main='Comparison of Log Loss Scores for the Three Scoring Methods')
boxplot(boxplots, ylim=c(16.3,16.6))
summary(yeast.data)
summary(yeast.data$P_CHARGE)
write.csv(summary(yeast.data$P_CHARGE))
write.csv(summary(yeast.data$ION_TYPE))
summary(yeast.data$LEFT_AA)
summary(yeast.data$RIGHT_AA)
write.csv(summary(yeast.data$RIGHT_AA))
write.csv(summary(yeast.data$LEFT_AA))
write.csv(summary(yeast.data$P_MASS))
write.csv(summary(yeast.data))
write.csv(summary(yeast.data$P_MASS))
plot(yeast.net.aic)
library(Rgraphviz)
graphviz.plot(yeast.net.aic)
graphviz.plot(yeast.net.aic, layout='neato')
graphviz.plot(yeast.net.aic, layout='circo')
par(mfrow=3)
par(mfrow='3')
par(mfrow=c(1,3))
graphviz.plot(yeast.net.aic, layout='circo')
graphviz.plot(yeast.net.aic, layout='circo')
graphviz.plot(yeast.net.aic, layout='circo')
yeast.net.bde<-hc(yeast.data, score='bde')
yeast.net.bic<-hc(yeast.data, score='bic')
graphviz.plot(yeast.net.aic, layout='circo')
graphviz.plot(yeast.net.bde, layout='circo')
graphviz.plot(yeast.net.bic, layout='circo')
graphviz.plot(yeast.net.bic, layout='circo', highlight)
graphviz.plot(yeast.net.bic, layout='circo', highlight=list(nodes='ION_TYPE'))
graphviz.plot(yeast.net.aic, layout='circo', highlight=list(nodes='ION_TYPE'))
graphviz.plot(yeast.net.bde, layout='circo', highlight=list(nodes='ION_TYPE'))
plot(yeast.net.bic, layout='circo', highlight=list(nodes='ION_TYPE'))
plot(yeast.net.bic, highlight=list(nodes='ION_TYPE'))
plot(yeast.net.bic, highlight=list(nodes='ION_TYPE'))
getwd()
save.image('new-workspace.RData')
