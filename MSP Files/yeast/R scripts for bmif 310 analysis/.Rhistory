}
for (i in 1:10) {
auc.cmeans[i]<-colMeans(colAUC(as.numeric(pred[[i]]), obs[[i]], plotROC=TRUE))
}
auc.cmeans<-rep(na,10)
auc.cmeans<-rep(NA,10)
for (i in 1:10) {
auc.cmeans[i]<-colMeans(colAUC(as.numeric(pred[[i]]), obs[[i]], plotROC=TRUE))
}
auc.cmeans
boxplot(auc.cmeans)
yeast.net.iamb<-iamb(yeast.data.transform)
plot(yeast.net.iamb)
yeast.net.iamb.fit<-bn.fit(yeast.net.iamb, yeast.data.transform)
cextend
cextend(yeast.net.iamb, debug=TRUE)
yeast.net.iamb<-cextend(yeast.net.iamb, debug=TRUE)
plot(yeast.net.iamb)
yeast.net.iamb.fit<-bn.fit(yeast.net.iamb, yeast.data.transform)
bn.fit.barchart(yeast.net.iamb.fit$ION_CHARGE)
bn.fit.dotplot(yeast.net.iamb.fit$ION_CHARGE)
plot(yeast.net.iamb)
bn.fit.barchart(yeast.net.iamb.fit$ION_TYPE)
plot(yeast.net.iamb)
whitelist
yeast.net.iamb<-iamb(yeast.data.transform,whitelist=whitelist)
plot(yeast.net.iamb)
yeast.net.iamb<-cextend(yeast.net.iamb)
plot(yeast.net.iamb)
yeast.net.iamb.fit<-bn.fit(yeast.net.iamb, yeast.data.transform)
cpdist(fitted=yeast.net.iamb.fit, nodes='ION_TYPE', evidence=(RIGHT_AA=='P'),debug=TRUE)
reverse.arc(yeast.net.iamb, 'ION_TYPE', 'PEAK_STRENGTH')
yeast.net.iamb<-reverse.arc(yeast.net.iamb, 'ION_TYPE', 'PEAK_STRENGTH')
plot(yeast.net.iamb)
yeast.net.iamb.fit<-bn.fit(yeast.net.iamb, yeast.data.transform)
bn.fit.dotplot(yeast.net.iamb.fit$ION_TYPE)
bn.fit.barchart(yeast.net.iamb.fit$ION_TYPE)
yeast.net.iamb.fit$ION_TYPE
summary(yeast.net.iamb.fit$ION_TYPE)
summary(yeast.net.iamb.fit$ION_TYPE$prob)
size
length
length(yeast.net.iamb.fit$ION_TYPE$prob)
21*21
3087/441
yeast.net.iamb.fit$ION_TYPE$prob[1,]
yeast.net.iamb.fit$ION_TYPE$prob[1,1,]
yeast.net.iamb.fit$ION_TYPE$prob[1,'P',]
yeast.net.iamb.fit$ION_TYPE$prob[7,,]
yeast.net.iamb.fit$ION_TYPE$prob[7,1,]
yeast.net.iamb.fit$ION_TYPE$prob[8,1,]
yeast.net.iamb.fit$ION_TYPE$prob[,1,1]
yeast.net.iamb.fit$ION_TYPE$prob[,1,2]
yeast.net.iamb.fit$ION_TYPE$prob[,1,'P']
yeast.net.iamb.fit$ION_TYPE$prob[,1,'A']
yeast.net.iamb.fit$ION_TYPE$prob[,1,'P']
yeast.net.iamb.fit$ION_TYPE$prob[,'P',1]
yeast.net.iamb.fit$ION_TYPE$prob[,10,1]
yeast.net.iamb.fit$ION_TYPE$prob[,11,1]
yeast.net.iamb.fit$ION_TYPE$prob[,20,1]
yeast.net.iamb.fit$ION_TYPE$prob[,21,1]
yeast.net.iamb.fit$ION_TYPE$prob[,22,1]
yeast.net.iamb.fit$ION_TYPE$prob['Y_ION',22,1]
yeast.net.iamb.fit$ION_TYPE$prob[5,22,1]
yeast.net.iamb.fit$ION_TYPE$prob[5,21,1]
yeast.net.iamb.fit$ION_TYPE$prob['Y_ION',21,1]
max(yeast.net.iamb.fit$ION_TYPE$prob['Y_ION',,1])
(yeast.net.iamb.fit$ION_TYPE$prob['Y_ION',,1])
hist((yeast.net.iamb.fit$ION_TYPE$prob['Y_ION',,1]))
?barchart
barchart((yeast.net.iamb.fit$ION_TYPE$prob['Y_ION',,1]))
barchart((yeast.net.iamb.fit$ION_TYPE$prob['Y_ION',1,'P']))
barchart((yeast.net.iamb.fit$ION_TYPE$prob['Y_ION',,'P']))
barchart((yeast.net.iamb.fit$ION_TYPE$prob['Y_ION',,]))
barchart((yeast.net.iamb.fit$ION_TYPE$prob['Y_ION',1,]))
barchart((yeast.net.iamb.fit$ION_TYPE$prob['Y_ION',2,]))
barchart((yeast.net.iamb.fit$ION_TYPE$prob['Y_ION',3,]))
barchart((yeast.net.iamb.fit$ION_TYPE$prob['Y_ION',4,]))
barchart((yeast.net.iamb.fit$ION_TYPE$prob['Y_ION',5,]))
barchart((yeast.net.iamb.fit$ION_TYPE$prob['Y_ION',6,]))
barchart((yeast.net.iamb.fit$ION_TYPE$prob['Y_ION',7,]))
boxplot((yeast.net.iamb.fit$ION_TYPE$prob['Y_ION',7,]))
barchart((yeast.net.iamb.fit$ION_TYPE$prob['Y_ION',7,]))
boxplot((yeast.net.iamb.fit$ION_TYPE$prob['Y_ION',,]))
barchart((yeast.net.iamb.fit$ION_TYPE$prob['Y_ION',7,]))
barchart((yeast.net.iamb.fit$ION_TYPE$prob['Y_ION',8,]))
barchart((yeast.net.iamb.fit$ION_TYPE$prob['Y_ION',9,]))
barchart((yeast.net.iamb.fit$ION_TYPE$prob['Y_ION',,]))
(yeast.net.iamb.fit$ION_TYPE$prob['Y_ION',,])
(yeast.net.iamb.fit$ION_TYPE$prob['B_ION',,])
(yeast.net.iamb.fit$ION_TYPE$prob['A_ION',,])
(yeast.net.iamb.fit$ION_TYPE$prob['A_ION',,])
(yeast.net.iamb.fit$ION_TYPE$prob['Y_ION',,])
(yeast.net.iamb.fit$ION_TYPE$prob['Y_ION',,'P'])
(yeast.net.iamb.fit$ION_TYPE$prob['Y_ION',A,])
(yeast.net.iamb.fit$ION_TYPE$prob['Y_ION','A',])
(yeast.net.iamb.fit$ION_TYPE$prob['Y_ION',1,])
(yeast.net.iamb.fit$ION_TYPE$prob['Y_ION',2,])
(yeast.net.iamb.fit$ION_TYPE$prob['Y_ION',3,])
(yeast.net.iamb.fit$ION_TYPE$prob['Y_ION',4,])
(yeast.net.iamb.fit$ION_TYPE$prob['Y_ION',5,])
(yeast.net.iamb.fit$ION_TYPE$prob['Y_ION',6,])
score(yeast.net.tan, yeast.data.transform)
score(yeast.net.aic, yeast.data.transform)
?score
?as.grain
yeast.net.tan.fit
yeast.net.tan.fit[[1]]
yeast.net.tan.fit[[2]]
rowSums(yeast.net.tan.fit[[2]])
rowSums(as.numeric(yeast.net.tan.fit[[2]]))
netcvfitk = as.grain(yeast.net.tan.fit)
summary(yeast.net.aic.fit)
summary(yeast.net.tan.fit)
predict(yeast.net.aic.fit, data=yeast.transform.data, training='ION_TYPE')
predict(yeast.net.aic.fit, data=yeast.data.transform, training='ION_TYPE')
predict(yeast.net.aic.fit, data=yeast.data.transform, training='ION_TYPE', node='ION_TYPE')
predict(yeast.net.aic.fit, data=yeast.data.transform, training='ION_TYPE')
predict(yeast.net.aic.fit, data=yeast.data.transform, training='ION_TYPE', debug=TRUE)
predict(yeast.net.aic.fit, data=yeast.data.transform, training='ION_TYPE', debug=TRUE, prior=rep(1,7))
cdpred
bnlearn::cdpred
bnlearn::dpred
bnlearn:dpred
bnlearn:::dpred
predict.bn.fit.dnode
predict(yeast.net.aic.fit, node='ION_TYPE', data=yeast.data.transform)
predict(yeast.net.aic, node='ION_TYPE', data=yeast.data.transform)
is.fitted.discrete
is.fitted.discrete(yeast.net.aic.fitted)
yeast.net.aic.fitted$type
yeast.net.aic.fit$type
summary(yeast.net.aic.fit)
summary(yeast.data.discretized)
summary(yeast.data.transform)
is.ordinal
is.ordered
is.ordered(yeast.data.transform$PEAK_MZ)
is.ordered(yeast.data.transform$ION_TYPE)
factor(yeast.data.transform$ION_TYPE)
is.ordered(factor(yeast.data.transform$ION_TYPE))
summary(factor(yeast.data.transform$ION_TYPE))
summary(factor(yeast.data.transform$P_MZ))
is.ordered(factor(yeast.data.transform$P_MZ))
is.ordered(factor(yeast.data.transform$P_MZ, ordered=FALSE))
summary(yeast.net.aic.fitted)
yeast.net.aic.fit
yeast.net.aic.fit
summary(yeast.net.aic.fit)
yeast.data.transform$PEAK_MZ = factor(yeast.data.transform$PEAK_MZ, ordered=FALSE)
yeast.data.transform$PEAK_STRENGTH = factor(yeast.data.transform$PEAK_STRENGTH, ordered=FALSE)
yeast.data.transform$P_MASS = factor(yeast.data.transform$P_MASS, ordered=FALSE)
yeast.data.transform$P_MZ = factor(yeast.data.transform$P_MZ, ordered=FALSE)
yeast.net.aic.fit<-bn.fit()
?bn.fit
yeast.net.aic.fit<-bn.fit(yeast.net.aic, yeast.data.transform, method='bayes')
summary(yeast.net.aic.fit)
yeast.net.aic.grain.fit<-as.grain(yeast.net.aic.fit)
summary(yeast.net.aic.grain.fit)
yeast.net.aic.grain.pred<-predict(yeast.net.aic.grain.fit, response=c('ION_TYPE'), newdata=yeast.data.transform)
summary(yeast.data.transform)
yeast.data.aaOnly<-cbind(yeast.data.transform$ION_TYPE, yeast.data.transform$LEFT_AA, yeast.data.transform$RIGHT_AA)
summary(yeast.data.aaOnly)
?cbind
yeast.data.aaOnly<-cbind(yeast.data.transform$ION_TYPE, yeast.data.transform$LEFT_AA, yeast.data.transform$RIGHT_AA, deparse.level=1)
summary(yeast.data.aaOnly)
yeast.data.aaOnly<-data.frame(yeast.data.transform$ION_TYPE, yeast.data.transform$LEFT_AA, yeast.data.transform$RIGHT_AA)
summary(yeast.data.aaOnly)
yeast.net.bayes.aaOnly<-naive.bayes(yeast.data.aaOnly)
yeast.net.bayes.aaOnly<-naive.bayes(yeast.data.aaOnly, 'ION_TYPE')
yeast.net.bayes.aaOnly<-naive.bayes(yeast.data.aaOnly, 'yeast.data.transform.ION_TYPE')
plot(yeast.net.bayes.aaOnly)
yeast.net.bayes.aaOnly.pred<-predict(yeast.net.bayes.aaOnly, yeast.data.aaOnly)
summary(yeast.net.bayes.aaOnly.pred)
summary(yeast.data.aaOnly)
table(yeast.net.bayes.aaOnly.pred, yeast.data.aaOnly$yeast.data.transform.ION_TYPE)
yeast.net.tan.aaOnly<-tree.bayes(yeast.data.aaOnly, 'yeast.data.transform.ION_TYPE')
colNames
colnames
colnames(yeast.net.tan.aaOnly)<-c('ION_TYPE', 'LEFT_AA', 'RIGHT_AA')
colnames(yeast.data.aaOnly)<-c('ION_TYPE', 'LEFT_AA', 'RIGHT_AA')
summary(yeast.data.aaOnly)
plot(yeast.net.aic)
summary(yeast.data.transform$BOND_POSITION)
yeast.data.aaPlusBond<-data.matrix(yeast.data.aaOnly, yeast.data.transform$BOND_POSITION)
summary(yeast.data.aaPlusBond)
yeast.data.aaPlusBond<-data.matrix(yeast.data.transform$ION_TYPE, yeast.data.transform$LEFT_AA, yeast.data.transform$RIGHT_AA, yeast.data.transform$BOND_POSITION)
yeast.data.aaPlusBond<-data.frame(yeast.data.transform$ION_TYPE, yeast.data.transform$LEFT_AA, yeast.data.transform$RIGHT_AA, yeast.data.transform$BOND_POSITION)
summary(yeast.data.aaPlusBond)
colnames
colnames(yeast.data.aaPlusBond) <- c('ION_TYPE', 'LEFT_AA', 'RIGHT_AA', 'BOND_POSITION')
summary(yeast.data.aaPlusBond)
yeast.net.tan.aaPlusBond<-tree.bayes(yeast.data.aaPlusBond)
yeast.net.tan.aaPlusBond<-tree.bayes(yeast.data.aaPlusBond, 'ION_TYPE')
plot(yeast.net.tan.aaPlusBond)
yeast.net.tan.aaPlusBond.pred<-predict(yeast.net.tan.aaPlusBond, yeast.data.aaPlusBond)
summary(yeast.net.tan.aaPlusBond.pred)
table(yeast.net.tan.aaPlusBond.pred, yeast.data.aaPlusBond$ION_TYPE)
summary(yeast.data)
summary(yeast.data$BOND_POSITION*yeast.data$P_NAA)
load("~/NetBeansProjects/MSP File Parser/MSP Files/yeast/yeast.data.filtered.RData")
summary(yeast.data)
load("~/NetBeansProjects/MSP File Parser/MSP Files/yeast/chicken.data.complete.RData")
summary(chicken.data)
yeast.data<-yeast.data[!is.na(chicken.data$P_MZ), ];
numUnprocessed<-length(yeast.data[,1]);
yeast.data<-yeast.data[yeast.data$NUM_SPECTRA_IN_CONSENSUS>= 50,]
summary(yeast.data)
yeast.data<-chicken.data[!is.na(chicken.data$P_MZ), ];
numUnprocessed<-length(yeast.data[,1]);
yeast.data<-yeast.data[yeast.data$NUM_SPECTRA_IN_CONSENSUS>= 50,]
summary(yeast.data)
getwd()
save(yeast.data, file='yeast.data.filtered.unprocessed')
is.factor(yeast.data$BOND_POSITION)
yeast.data.retransform<-data.frame(yeast.data$ION_TYPE, factor(yeast.data$BOND_POSITION,ordered=TRUE), yeast.data$LEFT_AA, yeast.data$RIGHT_AA, yeast.data$P_CHARGE, yeast.data$P_MASS)
summary(yeast.data.retransform)
is.factor(yeast.data$ION_TYPE)
is.factor(yeast.data$BOND_POSITION)
is.factor(yeast.data$LEFT_AA)
is.ordered(yeast.data$BOND_POSITION)
is.factor(yeast.data$RIGHT_AA)
is.factor(yeast.data$P_CHARGE)
is.factor(yeast.data$P_MASS)
?discretize
summary(yeast.data.transform)
yeast.data.retransform$yeast.data.P_MASS<-cut(yeast.data.retransform$yeast.data.P_MASS, c(0,1250,1610,1880,5000))
summary(yeast.data.retransform)
is.factor(yeast.data.retransform$yeast.data.P_MASS)
colnames(yeast.data.retransform)<-c('ION_TYPE', 'BOND_POSITION', 'LEFT_AA', 'RIGHT_AA', 'P_CHARGE', 'P_MASS')
summary(yeast.data.retransform)
summary(yeast.data.retransform$BOND_POSITION)
summary(factor(yeast.data.retransform$BOND_POSITION))
is.factor(factor(yeast.data.retransform$BOND_POSITION))
is.factor(factor(yeast.data.retransform$BOND_POSITION, ordered=TRUE))
is.ordered(factor(yeast.data.retransform$BOND_POSITION, ordered=TRUE))
summary(factor(yeast.data.retransform$BOND_POSITION))
yeast.net.retransform.tan<-tree.bayes(yeast.data.retransform)
yeast.net.retransform.tan<-tree.bayes(yeast.data.retransform, 'ION_TYPE')
plot(yeast.net.retransform.tan)
yeast.net.retransform.tan.fit<-bn.fit(yeast.net.retransform.tan, yeast.data.retransform)
yeast.net.retransform.tan.pred<-predict(yeast.net.retransform.tan.fit, yeast.data.retransform)
summary(yeast.net.retransform.tan.pred)
table(yeast.net.retransform.tan.pred, yeast.data.retransform$ION_TYPE)
colAUC(X=yeast.net.retransform.tan.pred, yeast.data.retransform$ION_TYPE, plotROC=TRUE)
colAUC(X=as.numeric(yeast.net.retransform.tan.pred), yeast.data.retransform$ION_TYPE, plotROC=TRUE)
yeast.net.retransform.nb<-naive.bayes(yeast.data.retransform, 'ION_TYPE')
plot(yeast.net.retransform.nb)
yeast.net.retransform.nb.pred<-predict(yeast.net.retransform.nb, yeast.data.retransform)
summary(yeast.net.retransform.nb.pred)
colAUC(X=as.numeric(yeast.net.retransform.nb.pred), yeast.data.retransform$ION_TYPE, plotROC=TRUE)
summary(yeast.data)
summary(yeast.net.tan.pred)
colAUC(X=as.numeric(yeast.net.tan.pred), yeast.data.transform$$ION_TYPE, plotROC=TRUE)
colAUC(X=as.numeric(yeast.net.tan.pred), yeast.data.transform$ION_TYPE, plotROC=TRUE)
colAUC(X=as.numeric(yeast.net.bayes.pred), yeast.data.transform$ION_TYPE, plotROC=TRUE)
install.packages("pROC")
library(pROC)
?pROC
multiclass.roc
?multiclass.roc
multiclass.roc(yeast.data.transform$ION_TYPE, yeast.net.bayes.pred)
ionType<-yeast.data.transform$ION_TYPE
summary(ionType)
ionType.pred<-yeast.net.bayes.pred
summary(ionType.pred)
summary(yeast.net.bayes.pred)
summary(yeast.net.tan.pred)
ionType.pred<-yeast.net.tan.pred
summary(ionType.pred)
summary(ionType.pred==A_ION)
summary(ionType.pred=='A_ION')
ionType.pred.A<-ionType.pred=='A_ION'
summary(ionType.pred.A)
ionType.A<-ionType=='A_ION'
summary(ionType.A)
colAUC(ionType.pred.A, ionType.A, plot=TRUE)
colAUC(as.numeric(ionType.pred.A), ionType.A, plot=TRUE)
?colAUC
colAUC(as.numeric(ionType.pred.A), ionType.A, plotROC=TRUE)
summary(ionType.A)
summary(yeast.data.transform$ION_TYPE)
?colAUC
colAUC(as.numeric(ionType.pred.A), as.numeric(ionType.A), plotROC=TRUE)
?colAUC
colAUC(X=as.numeric(yeast.net.tan.pred), yeast.data.transform$ION_TYPE, plotROC=TRUE)
?roc
multiclass.roc(yeast.data.transform$ION_TYPE, yeast.net.bayes.pred, plot=TRUE)
roc(yeast.data.transform$ION_TYPE, yeast.net.bayes.pred, plot=TRUE)
?roc
multiclass.roc(yeast.data.transform$ION_TYPE, yeast.net.bayes.pred, plot=TRUE)
colAUC(X=as.numeric(yeast.net.tan.pred), yeast.data.transform$ION_TYPE, plotROC=TRUE)
?predict
write.csv(colAUC(X=as.numeric(yeast.net.tan.pred), yeast.data.transform$ION_TYPE, plotROC=TRUE))
auc<-colAUC(X=as.numeric(yeast.net.tan.pred), yeast.data.transform$ION_TYPE, plotROC=TRUE)
summary(auc)
auc
names(auc)
auc[1]
auc[,1]
levels(auc[,1])
labels(auc[,1])
aucLabels<-labels(auc[,1])
?split
?apply
?sapply
sapply(aucLabels, function(x) {return(x)})
?strsplit
strsplit('bing boom', ' ')
strsplit('bing boom', ' ')[1]
strsplit('bing boom', ' ')[1][1]
strsplit('bing boom', ' ')[[1]]
strsplit('bing boom', ' ')[[1]][1]
strsplit(aucLabels, ' ')[[1]][1]
sapply(aucLabels, function(x) {strsplit(x, ' ')[[1]][1]})
fromIon<-sapply(aucLabels, function(x) {strsplit(x, ' ')[[1]][1]})
fromIon
write.csv(fromIon)
sapply(aucLabels, function(x) {strsplit(x, ' ')[[1]][2]})
sapply(aucLabels, function(x) {strsplit(x, ' ')[[1]][3]})
toIon<-sapply(aucLabels, function(x) {strsplit(x, ' ')[[1]][3]})
write.csv(fromIon, toIon)
write.csv(data.frame(fromIon, toIon))
auc
write.csv(data.frame(fromIon, toIon, auc))
auc
plot(yeast.net.bayes)
yeast.net.bayes.pred<-predict(yeast.net.bayes, yeast.data.transform)
summary(yeast.data.transform)
aucNaiveBayes<-colAUC(X=as.numeric(yeast.net.bayes.pred), yeast.data.transform$ION_TYPE, plotROC=TRUE)
aucNaiveBayes
write.csv(data.frame(fromIon, toIon, aucNaiveBayes))
aucNaiveBayes
auc<-colAUC(X=as.numeric(yeast.net.tan.pred), yeast.data.transform$ION_TYPE, plotROC=TRUE)
auc
mean(auc)
load("~/NetBeansProjects/MSP File Parser/MSP Files/yeast/yeast-sigma-workspace.RData")
summary(sigma.tan.pred)
summary(sigma.tan.pred.table)
sigma.tan.pred.table
summary(sigma.data)
summary(yeast.data.transform)
summary(yeast.data.transform$BOND_POSITION)
levels(yeast.data.transform$BOND_POSITION)
source('~/NetBeansProjects/MSP File Parser/MSP Files/process.sigma.msp.R')
summary(sigma.data)
source('~/NetBeansProjects/MSP File Parser/MSP Files/process.sigma.msp.R')
summary(sigma.data)
summary(yeast.data.transform)
source('~/NetBeansProjects/MSP File Parser/MSP Files/process.sigma.msp.R')
summary(sigma.data)
sigma.data<-read.csv(filename.mspoutput, colClasses=c("factor", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "factor", "factor",
"numeric", "numeric", "numeric", "numeric", "character"))
sigma.data<-sigma.data[!is.na(sigma.data$P_MZ), ];
numUnprocessed<-length(sigma.data[,1]);
sigma.data<-sigma.data[sigma.data$NUM_SPECTRA_IN_CONSENSUS>= 50,]
quantileBondPos<-cut(sigma.data$BOND_POSITION / sigma.data$P_NAA, breaks=44)
quantilePeakMZ<-cut(sigma.data$PEAK_MZ, breaks=c(86.1,489,800,1260,2000))
quantilePeakStrength<-cut(sigma.data$PEAK_STRENGTH, breaks=c(0,96,288,528,11000))
factoredProteinName<-factor(sigma.data$PROTEIN_NAME)
numProteins<-length(levels(factoredProteinName))
sigma.data$P_MASS<-cut(sigma.data$P_MASS, breaks=c(544,1250,1610,1880,4900))
sigma.data$P_MZ<-cut(sigma.data$P_MZ, breaks=c(256,626,804,943,1790))
sigma.data$BOND_POSITION<-sigma.data$quantileBondPos
sigma.data$PEAK_MZ<-quantilePeakMZ
sigma.data$PEAK_STRENGTH<-quantilePeakStrength
sigma.data$P_CHARGE<-factor(sigma.data$P_CHARGE)
sigma.data$ION_CHARGE<-factor(sigma.data$ION_CHARGE)
summary(sigma.data)
filename.mspoutput<-"/Users/johndoe/NetBeansProjects/MSP File Parser/MSP Files/sigmaups/sigmaups1_consensus_final_true_lib.parser.csv";
sigma.data<-read.csv(filename.mspoutput, colClasses=c("factor", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "factor", "factor",
"numeric", "numeric", "numeric", "numeric", "character"))
summary(sigma.data)
sigma.data<-sigma.data[!is.na(sigma.data$P_MZ), ];
summary(sigma.data)
numUnprocessed<-length(sigma.data[,1]);
numUnprocessed
sigma.data<-sigma.data[sigma.data$NUM_SPECTRA_IN_CONSENSUS>= 50,]
summary(sigma.data)
quantileBondPos<-cut(sigma.data$BOND_POSITION / sigma.data$P_NAA, breaks=44)
summary(quantileBondPos)
quantilePeakMZ<-cut(sigma.data$PEAK_MZ, breaks=c(86.1,489,800,1260,2000))
quantilePeakStrength<-cut(sigma.data$PEAK_STRENGTH, breaks=c(0,96,288,528,11000))
factoredProteinName<-factor(sigma.data$PROTEIN_NAME)
numProteins<-length(levels(factoredProteinName))
sigma.data$P_MASS<-cut(sigma.data$P_MASS, breaks=c(544,1250,1610,1880,4900))
sigma.data$P_MZ<-cut(sigma.data$P_MZ, breaks=c(256,626,804,943,1790))
summary(sigma.data)
sigma.data$BOND_POSITION<-sigma.data$quantileBondPos
summary(sigma.data)
summary(quantileBondPos)
length(quantileBondPos)
length(sigma.data$ION_TYPE)
sigma.data$BOND_POSITION<-quantileBondPos
summary(sigma.data)
source('~/NetBeansProjects/MSP File Parser/MSP Files/process.sigma.msp.R')
summary(sigma.data)
summary(yeast.data.transform)
filename.mspoutput<-"/Users/johndoe/NetBeansProjects/MSP File Parser/MSP Files/sigmaups/sigmaups1_consensus_final_true_lib.parser.csv";
sigma.data<-read.csv(filename.mspoutput, colClasses=c("factor", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "factor", "factor",
"numeric", "numeric", "numeric", "numeric", "character"))
sigma.data<-sigma.data[!is.na(sigma.data$P_MZ), ];
numUnprocessed<-length(sigma.data[,1]);
sigma.data<-sigma.data[sigma.data$NUM_SPECTRA_IN_CONSENSUS>= 50,]
quantileBondPos<-cut(sigma.data$BOND_POSITION / sigma.data$P_NAA, breaks=44)
quantilePeakMZ<-cut(sigma.data$PEAK_MZ, breaks=c(86.1,489,800,1260,2000))
quantilePeakStrength<-cut(sigma.data$PEAK_STRENGTH, breaks=c(0,96,288,528,11000))
factoredProteinName<-factor(sigma.data$PROTEIN_NAME)
numProteins<-length(levels(factoredProteinName))
sigma.data$P_MASS<-cut(sigma.data$P_MASS, breaks=c(544,1250,1610,1880,4900))
sigma.data$P_MZ<-cut(sigma.data$P_MZ, breaks=c(256,626,804,943,1790))
sigma.data$BOND_POSITION<-quantileBondPos
sigma.data$PEAK_MZ<-quantilePeakMZ
sigma.data$PEAK_STRENGTH<-quantilePeakStrength
sigma.data$P_CHARGE<-factor(sigma.data$P_CHARGE)
sigma.data$ION_CHARGE<-factor(sigma.data$ION_CHARGE)
summary(sigma.data)
sigma.data<-cbind(sigma.data[,1:4], sigma.data[,7:10], sigma.data[,12:13])
summary(sigma.data)
summary(yeast.data.transform)
getwd()
save(sigma.data.transform, file='sigma.data.transform.RData')
save(sigma.data, file='sigma.data.transform.RData')
sigma.tan.pred<-predict(yeast.tan.fit, data=sigma.data, node='ION_TYPE')
summary(sigma.data)
summary(yeast.tan.fit)
sigma.tan.pred<-predict(yeast.net.tan.fit, data=sigma.data, node='ION_TYPE')
summary(sigma.tan.pred)
table(sigma.tan.pred, sigma.data$ION_TYPE)
length(sigma.tan.pred)
sigma.auc<-colAUC(X=as.numeric(sigma.tan.pred), sigma.data$ION_TYPE, plotROC=TRUE)
sigma.auc
auc
write.csv(data.frame(fromIon, toIon, sigma.auc))
write.csv(sigma.tan.pred, sigma.data$ION_TYPE)
write.csv(table((sigma.tan.pred, sigma.data$ION_TYPE)))
write.csv(table(sigma.tan.pred, sigma.data$ION_TYPE))
grpahviz
library(Rgraphviz)
graphviz.plot(yeast.net.tan)
graphviz.plot(yeast.net.tan, layout='circo')
graphviz.plot(yeast.net.tan, layout='neato')
graphviz.plot(yeast.net.tan, layout='neato', attr)
gplot<-graphviz.plot(yeast.net.tan, layout='neato' )
?gplot
gplot
gplot$attr
gplot.attr
gplot[1]
gplot[fontsize=20]
gplot<-graphviz.plot(yeast.net.tan, layout='asdf' )
gplot<-graphviz.plot(yeast.net.tan, layout='twopi' )
gplot<-graphviz.plot(yeast.net.tan, layout='fdp' )
gplot<-graphviz.plot(yeast.net.tan, layout='circo' )
gplot<-graphviz.plot(yeast.net.tan, layout='dot' )
gplot<-graphviz.plot(yeast.net.tan, layout='dot' , highlight=asd)
gplot<-graphviz.plot(yeast.net.tan, layout='dot' , highlight='asdf')
?graphviz.plot
graphviz.plot(yeast.net.tan)
graphviz.plot(yeast.net.aic)
graphviz.plot(yeast.net.aic, layout='circo')
summary(yeast.data.transform)
yeast.net.aic<-hc(yeast.data.transform, score='aic')
graphviz.plot(yeast.net.aic, layout='circo')
yeast.net.aic<-drop.arc(yeast.net.aic, 'BOND_POSITION', 'ION_TYPE')
graphviz.plot(yeast.net.aic, layout='circo')
cpdist(yeast.net.aic, 'ION_TYPE', (RIGHT_AA=='P'), debug=TRUE)
yeast.net.aic.fit<-bn.fit(yeast.net.aic, yeast.data.transform)
cpdist(yeast.net.aic, 'ION_TYPE', (RIGHT_AA=='P'), debug=TRUE)
cpdist(yeast.net.aic.fit, 'ION_TYPE', (RIGHT_AA=='P'), debug=TRUE)
?cpdist
cpdist(yeast.net.aic.fit, 'ION_TYPE', (RIGHT_AA=='P'), debug=TRUE, method-'lw')
cpdist(yeast.net.aic.fit, 'ION_TYPE', (RIGHT_AA=='P'), debug=TRUE, method='lw')
cpdist(yeast.net.aic.fit, 'ION_TYPE', evidence=(RIGHT_AA=='P'), debug=TRUE, method='lw')
table(cpdist(yeast.net.aic.fit, 'ION_TYPE', evidence=(RIGHT_AA=='P')))
plot(yeast.net.aic)
graphviz.plot(yeast.net.aic)
yeast.net.aic<-hc(yeast.data.transform, score='aic')
graphviz.plot(yeast.net.aic)
pwd
getwd()
write.net(file='yeast.net.aic.net', yeast.net.aic.fit)
write.dsc(file='yeast.net.aic.dsc', yeast.net.aic.fit)
sigma.aic.pred<-predict(yeast.net.aic.fit, data=sigma.data, node='ION_TYPE')
graphviz.plot(yeast.net.aic, layout=asdf)
graphviz.plot(yeast.net.aic, layout='asdf')
graphviz.plot(yeast.net.aic, layout='twopi')
graphviz.plot(yeast.net.aic[-1], layout='twopi')
graphviz.plot(yeast.net.aic, layout='twopi')
graphviz.plot(yeast.net.aic.cv, layout='twopi')
graphviz.plot(yeast.net.aic.cv[1], layout='twopi')
graphviz.plot(yeast.net.aic.cv[[1]], layout='twopi')
yeast.net.aic.cv
yeast.net.aic.cv[[1]]
yeast.net.aic.cv[[1]]$net
yeast.net.aic.cv[[1]]$fitted
graphviz.plot(yeast.net.aic.cv[[1]]$fitted, layout='twopi')
graphviz.plot(yeast.net.aic.cv[[2]]$fitted, layout='twopi')
graphviz.plot(yeast.net.aic.cv[[3]]$fitted, layout='twopi')
graphviz.plot(yeast.net.aic.cv[[2]]$fitted, layout='twopi')
graphviz.plot(yeast.net.aic.cv[[3]]$fitted, layout='twopi')
graphviz.plot(yeast.net.aic.cv[[4]]$fitted, layout='twopi')
graphviz.plot(yeast.net.aic.cv[[5]]$fitted, layout='twopi')
graphviz.plot(yeast.net.aic, layout='twopi')
graphviz.plot(yeast.net.aic, layout='tasd')
graphviz.plot(yeast.net.aic, layout='fdp')
summary(yeast.data)
numProteins
numUnprocessed
