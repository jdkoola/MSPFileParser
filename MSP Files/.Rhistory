learnedLearningTestNetwork <- iamb(learning.test)
plot(learnedLearningTestNetwork)
ci.test(x=learning.test$E, y=learning.test$F, z=learning.test$B)
score(set.arc(learnedLearningTestNetwork, "A", "B"), learning.test)
score(set.arc(learnedLearningTestNetwork, "B", "A"), learning.test)
choose.direction(learnedLearningTestNetwork, c("A", "B"), data=learning.test, criterion="k2")
plot(learnedLearningTestNetwork)
choose.direction(learnedLearningTestNetwork, c("A", "B"), data=learning.test, criterion="k2")
?choose.direction
choose.direction(learnedLearningTestNetwork, c("A", "B"), data=learning.test, criterion="k2", debug=TRUE)
fullyDAGofLearningTest<-choose.direction(learnedLearningTestNetwork, c("A", "B"), data=learning.test, criterion="k2", debug=TRUE)
plot(fullyDAGofLearningTest)
cptEstimate<-bn.fit(fullyDAGofLearningTest, learning.test)
cptEstimate
learning.test$B
sum(learning.test$B)
summary(learning.test$B)
2362/5000
cptEstimate$A
summary(learning.test$A)
1668/5000
1670/5000
1662/5000
bn.fit.barchart(fit$D)
bn.fit.barchart(fullyDAGofLearningTest$D)
bn.fit.barchart(cptEstimate$D)
imaginaryData<-cbind(gaussian.test, learning.test$A)
imaginaryDAta
imaginaryData
newNetwork<-iamb(imaginaryData)
newCol<-learning.test$F
newCol
newCol<-learning.test$E
newCol
numericNewCol<-factor(newCol, labels=c(1,2,3))
numericNewCol
imaginaryData<-cbind(gaussian.test, numericNewCol)
iamb(imaginaryData)
imaginaryData<-cbind(gaussian.test, seq(1:5000))
imaginaryData
iamb(imaginaryData)
imaginaryData$F
imaginaryData$g
imaginaryData$G
imaginaryData$H
imaginaryData[,8]
as.float
as.real
as.double
as.double(imaginaryData[,8])
library(bnlearn)
## discrete Bayesian network (it's the same with ordinal nodes).
data(learning.test)
fitted = bn.fit(hc(learning.test), learning.test)
# the result should be around 0.025.
cpquery(fitted, (B == "b"), (A == "a"))
# for a single observation, predict the value of a single
# variable conditional on the others.
var = names(learning.test)
obs = 2
str = paste("(", names(learning.test)[-3], "=='",
sapply(learning.test[obs,-3], as.character), "')",
sep = "", collapse = " & ")
str
str2 = paste("(", names(learning.test)[3], "=='",
as.character(learning.test[obs, 3]), "')", sep = "")
str2
cpquery(fitted, eval(parse(text = str2)), eval(parse(text = str)))
# do the same with likelihood weighting
cpquery(fitted, event = eval(parse(text = str2)),
evidence = as.list(learning.test[2, -3]), method = "lw")
# conditional distribution of A given C == "c".
table(cpdist(fitted, "A", (C == "c")))
plot(fitted)
plot(hc(learning.test))
fitted$B
library(bnlearn)
chickenData<-read.csv("/Users/johndoe/Documents/NIST Peptide Spectra Libraries/Parser Processed/Chicken-consensus-library.csv")
names(chickenData)
chickenNetwork<-iamb(chickenData)
chickenData[1,]
chickenData[2,]
chickenData[3,]
chickenData[4,]
chickenData[5,]
chickenData[6,]
?check.data
levels(chickenData)
summary(chickenData)
newChickenData=cbind(chickenData[,1:5], chickenData[,7:8])
newChickenData=cbind(chickenData[,1:5], chickenData[,7:9])
summary(newChickenData)
chickenNetwork<-iamb(newChickenData)
chickenNetwork
plot(chickenNetwork)
chickenNetwork<-hc(newChickenData)
chickenNetwork
plot(chickenNetwork)
parameterEstimates<-bn.fit(chickenNetwork, newChickenData)
parameterEstimates
arc.strength(chickenNetwork, newChickenData, criterion="bootstrap")
score(chickenNetwork, newChickenData, "aic")
score(chickenNetwork, newChickenData, "bic")
score(chickenNetwork, newChickenData, "lik")
score(chickenNetwork, newChickenData, "k2")
score(chickenNetwork, newChickenData, "loglik")
score(chickenNetwork, newChickenData, "aic")
?set.arc
drop.arc(chickenNetwork, "B_WATER", "A_ION")
plot(chickenNetwork)
chickenNetwork<-drop.arc(chickenNetwork, "B_WATER", "A_ION")
plot(chickenNetwork)
score(chickenNetwork, newChickenData, "aic")
parameterEstimates<-bn.fit(chickenNetwork, newChickenData)
bn.fit.barchart(parameterEstimates$A_ION)
bn.fit.barchart(parameterEstimates$Y_ION)
plot(chickenNetwork)
cpquery(parameterEstimates, Y_ION=true, B_ION=true)
cpquery(parameterEstimates, (Y_ION=true) , (B_ION=true))
cpquery(parameterEstimates, (Y_ION="true"") , (B_ION="true"))
cpquery(parameterEstimates, (Y_ION="true") , (B_ION="true"))
cpquery(parameterEstimates, (Y_ION=1) , (B_ION=1))
cpquery(parameterEstimates, (Y_ION='true') , (B_ION='true'))
cpquery(parameterEstimates, (Y_ION=='true') , (B_ION=='true'))
cpquery(parameterEstimates, (Y_ION=='true') , ((B_ION=='true') & (Y_WATER=='false')))
cpquery(parameterEstimates, (Y_ION=='true') , ((B_ION=='true') & (Y_WATER=='true')))
ci.test("B_NH3", "Y_ION", "B_ION", data=newChickenNetwork)
ci.test("B_NH3", "Y_ION", "B_ION", data=newChickenData)
ci.test("B_NH3", "Y_ION", "B_ION", data=newChickenData, score='mc-x2')
?ci.test
ci.test("B_NH3", "Y_ION", "B_ION", data=newChickenData, test='mc-x2')
chickenNetwork<-hc(newChickenData, score='aic')
plot(chickenNetwork)
chickenNetwork<-hc(newChickenData)
plot(chickenNetwork)
chickenNetwork<-gs(newChickenData)
plot(chickenNetwork)
chickenNetwork<-hc(newChickenData, score='k2')
plot(chickenNetwork)
fit
parameterEstimates
save(parameterEstimates)
getwd()
setwd("~/Documents/NIST Peptide Spectra Libraries/Paper")
setwd("~/Documents/NIST Peptide Spectra Libraries/Paper/R Data")
save(parameterEstimates, 'NODES-ONLY-HC-BIC-PARAMETERS')
?save
save(parameterEstimates, file= 'NODES-ONLY-HC-BIC-PARAMETERS')
setwd("~/Documents/NIST Peptide Spectra Libraries/Parser Processed")
chickenData<-read.csv()
?read.csv
chickenData<-read.csv("Chicken-consensus-all-factors.csv")
chickenData<-read.csv("Chicken-consensus-all-factors.csv")
getwd()
setwd("~/NetBeansProjects/MSP File Parser/MSP Files")
chickenData<-read.csv("chicken_consensus_final_true_lib_parser_output.csv")
summary(chickenData)
chickenData<-cbind(chickenData[,1:5], chickenData[,7:15])
summary(chickenData)
chickenNetwork<-iamb(chickenData)
chickenData<-read.csv("chicken_consensus_final_true_lib_parser_output.csv", colClasses=c(logical, logical, logical, logical, logical, NULL, logical, logical, logical, "factor", "factor", "factor", "factor", "factor", "factor", "factor" ))
chickenData<-read.csv("chicken_consensus_final_true_lib_parser_output.csv", colClasses=c(rep("logical", 9), rep("factor", 6)))
summary(chickenData)
chickenData<-cbind(chickenData[,1:5], chickenData[,7:15])
summary(chickenData)
chickenNetwork<-iamb(chickenData)
chickenData<-read.csv("chicken_consensus_final_true_lib_parser_output.csv", colClasses=c(rep("factor", 9), rep("factor", 6)))
chickenData<-cbind(chickenData[,1:5], chickenData[,7:15])
summary(chickenData)
chickenNetwork<-iamb(chickenData)
chickenNetwork
plot(chickenNetwork)
chickenNetwork<-hc(chickenData)
plot(chickenNetwork)
chickenNetwork
?hc
chickenNetwork<-hc(chickenData, restart=10, perturb=5, max.iter=1000)
chickenNetwork
plot(chickenNetwork)
?hc
blacklist<-matrix(c(names(chickenData), rep("LEFT_AA",14)), ncol=2)
blacklist
blacklist2<-matrix(c(names(chickenData), rep("RIGHT_AA",14)), ncol=2)
blacklist<-rbind(blacklist, blacklist2)
blacklist
chickenNetwork<-hc(chickenData, restart=10, perturb=5, max.iter=1000, blacklist=blacklist)
chickenNetwork
plot(chickenNetwork)
chickenNetwork<-hc(chickenData,  blacklist=blacklist)
plot(chickenNetwork)
?bn.fit
parameterEstimates<-bn.fit(chickenNetwork, chickenData)
plot(chickenNetwork)
bn.fit.barchart(chickenNetwork$Y_ION)
bn.fit.barchart(parameterEstimates$Y_ION)
parameterEstimates$Y_ION
?cpdist
cpdist(parameterEstimates, "Y_ION", evidence=(B_ION=='true'))
chickenData
chickenData[5,1] = NA
chickenData[5,1]
chickenNetwork<-iamb(chickenData)
getwd()
chickenData<-read.csv("chicken_consensus_final_true_lib_parser-output.csv", colClasses=c(rep("factor", 9), rep("factor", 6)))
summary(chickenData)
chickenData<-cbind(chickenData[,1:5], chickenData[,7:15])
summary(chickenData)
chickenNetwork<-iamb(chickenData)
plot(chickenNetwork)
blacklist<-matrix(c(names(chickenData), rep("LEFT_AA",14)), ncol=2)
blacklist2<-matrix(c(names(chickenData), rep("RIGHT_AA",14)), ncol=2)
blacklist3<-matrix(c(names(chickenData), rep("BOND_POSITION",14)), ncol=2)
blacklist<-rbind(blacklist, blacklist2, blacklist3)
blacklist
chickenNetwork<-hc(chickenData,  blacklist=blacklist)
plot(chickenNetwork)
summary(chickenData$LEFT_AA)
summary(chickenData$RIGHT_AA)
blacklist2<-matrix(c(names(chickenData), rep("P_MASS",14)), ncol=2)
blacklist3<-matrix(c(names(chickenData), rep("P_CHARGE",14)), ncol=2)
blacklist4<-matrix(c(names(chickenData), rep("P_MZ",14)), ncol=2)
blacklist<-rbind(blacklist, blacklist2, blacklist3, blacklist4)
blacklist
chickenNetwork<-hc(chickenData,  blacklist=blacklist)
plot(chickenNetwork)
fit<-bn.fit(chickenNetwork, chickenData)
fit
summary(fit$Y_ION)
fit$Y_ION
?set.arc
plot(chickenNetwork)
reverse.arc(chickenNetwork, "Y_WATER", "Y_ION")
plot(chickenNetwork)
reverse.arc(chickenNetwork, "Y_WATER", "Y_ION")
plot(chickenNetwork)
?reverse.arc
set.arc(chickenNetwork, "Y_WATER", "Y_ION")
plot(chickenNetwork)
set.arc(chickenNetwork, "Y_ION", "Y_WATER")
plot(chickenNetwork)
chickenNetwork
?set.arc
drop.arc(chickenNetwork, "Y_ION", "Y_WATER")
plot(chickenNetwork)
drop.arc(chickenNetwork, "Y_WATER", "Y_ION")
plot(chickenNetwork)
plot(chickenNetwork)
drop.arc(chickenNetwork, Y_WATER, Y_ION)
drop.arc(chickenNetwork, chickenNetwork$Y_WATER, chickenNetwork$Y_ION)
?set.arc
drop.arc(chickenNetwork, from="Y_WATER", to="Y_ION")
plot(chickenNetwork)
chickenNetwork
?modelString
?model
??model
modelstring(chickenNetwork)<-"[BOND_POSITION][LEFT_AA][RIGHT_AA][P_CHARGE][P_MASS][P_MZ][B_ION|BOND_POSITION]
[A_ION|B_ION:BOND_POSITION][B_WATER|B_ION:BOND_POSITION][Y_WATER|B_ION:BOND_POSITION]
[Y_ION|B_ION:Y_WATER:RIGHT_AA][B_NH3|B_ION:A_ION:B_WATER][Y_NH3|B_NH3][A_NH3|B_NH3]"
chickenNetwork
plot(chickenNetwork)
modelstring(chickenNetwork)<-"[BOND_POSITION][LEFT_AA][RIGHT_AA][P_CHARGE][P_MASS][P_MZ][B_ION|BOND_POSITION]
[A_ION|B_ION:BOND_POSITION][B_WATER|B_ION:BOND_POSITION][Y_WATER|B_ION:BOND_POSITION]
[Y_ION|B_ION:RIGHT_AA][B_NH3|B_ION:A_ION:B_WATER][Y_NH3|B_NH3][A_NH3|B_NH3]"
plot(chickenNetwork)
set.arc(chickenNetwork, "Y_ION", "Y_WATER")
plot(chickenNetwork)
modelstring(chickenNetwork)<-"[BOND_POSITION][LEFT_AA][RIGHT_AA][P_CHARGE][P_MASS][P_MZ][B_ION|BOND_POSITION]
[A_ION|B_ION:BOND_POSITION][B_WATER|B_ION:BOND_POSITION][Y_WATER|B_ION:Y_ION:BOND_POSITION]
[Y_ION|B_ION:RIGHT_AA][B_NH3|B_ION:A_ION:B_WATER][Y_NH3|B_NH3][A_NH3|B_NH3]"
plot(chickenNetwork)
score(chickenNetwork, chickenata)
score(chickenNetwork, chickenData)
modelstring(chickenNetwork)<-"[BOND_POSITION][LEFT_AA][RIGHT_AA][P_CHARGE][P_MASS][P_MZ][B_ION|BOND_POSITION]
[A_ION|B_ION:BOND_POSITION][B_WATER|B_ION:BOND_POSITION][Y_WATER|B_ION:BOND_POSITION]
[Y_ION|B_ION:Y_WATER:RIGHT_AA][B_NH3|B_ION:A_ION:B_WATER][Y_NH3|B_NH3][A_NH3|B_NH3]"
score(chickenNetwork, chickenData)
modelstring(chickenNetwork)<-"[BOND_POSITION][LEFT_AA][RIGHT_AA][P_CHARGE][P_MASS][P_MZ][B_ION|BOND_POSITION]
[A_ION|B_ION:BOND_POSITION][B_WATER|B_ION:BOND_POSITION][Y_WATER|B_ION:Y_ION:BOND_POSITION]
[Y_ION|B_ION:RIGHT_AA][B_NH3|B_ION:A_ION:B_WATER][Y_NH3|B_NH3][A_NH3|B_NH3]"
score(chickenNetwork, chickenData)
?boot.strength
boot.strength(chickenData)
boot.strength(chickenData, algorithm="hc")
chickenNetwork_hc <- hc(chickenNetwork)
chickenNetwork_hc <- hc(chickenData)
plot(chickenNetwork_hc)
chickenNetwork_hc <- hc(chickenData, blacklist=blacklist)
plot(chickenNetwork_hc)
?boot.strength
boot.strength(chickenData, algorithm="hc", algorithm.args="blacklist=blacklist")
list()
list("blacklist", blacklist)
list(c("blacklist", blacklist))
boot.strength(chickenData, algorithm="hc", algorithm.args="blacklist")
boot.strength(chickenData, algorithm="hc", algorithm.args=blacklist)
?hc
blacklistParams=blacklist
list("blacklist"=>blacklist)
map("blacklist"=>blacklist)
map("blacklist">blacklist)
list("blacklist">blacklist)
list(blacklist=blacklistParams)
boot.strength(chickenData, algorithm="hc", algorithm.args=list(blacklist=blacklistParams))
fit.strength<-boot.strength(chickenData, algorithm="hc", algorithm.args=list(blacklist=blacklistParams))
fit.strength
fit.strength$strength
fit.strength[fit.strength$strength > 0.1]
fit.strength[fit.strength$strength > 0.1,]
chickenNetwork<-hc(chickenData, blacklist=blacklist)
plot(chickenNetwork)
chickenData<-read.csv("chicken_consensus_final_true_lib_parser.csv")
chickenData<-read.csv("chicken_consensus_final_true_lib_parser.csv", colClasses=c(rep("factor", 9), rep("factor", 6)))
summary(chickenData)
?jc
?jz
chickenNetwork<-hc(chickenData, blacklist=blacklist)
chickenData<-cbind(chickenData[,1:5], chickenData[,7:15])
chickenNetwork<-hc(chickenData, blacklist=blacklist)
plot(chickenNetwork)
score(chickenNetwork, chickenData)
?score
score(chickenNetwork, chickenData, type="aic")
plot(chickenNetwork)
reverse.arc(chickeNetwork, "Y_WATER", "Y_ION")
reverse.arc(chickenNetwork, "Y_WATER", "Y_ION")
chickenNetwork<-reverse.arc(chickenNetwork, "Y_WATER", "Y_ION")
plot(chickenNetwork)
score(chickenNetwork, chickenData, type="aic")
parameters<-bn.fit(chickenNetwork, chickenData, score="aic")
parameters<-bn.fit(chickenNetwork, chickenData, test="aic")
?bn.fit
parameters<-bn.fit(chickenNetwork, chickenData, method="aic")
parameters<-bn.fit(chickenNetwork, chickenData)
parameters
parameters$Y_ION
bn.fit.histogram(parameters)
bn.fit.boxplot(parameters)
bn.fit.dotplot(parameters)
bn.fit.dotplot(parameters$Y_ION)
parameters$Y_ION
data(learning.test)
start = random.graph(nodes = names(learning.test), num = 50)
netlist = lapply(start, function(net) {
hc(learning.test, score = "bde", iss = 10, start = net) })
arcs = custom.strength(netlist, nodes = names(learning.test), cpdag = FALSE)
plot(arcs)
netlist
netlist$50
neltist[50]
netlist$50
netlist[50]
fit.strength
plot(fit.strength)
fit.strength<-fit.strength[fit.strength$strength>0,]
fit.strength
plot(fit.strength)
bn = naive.bayes("A", LETTERS[2:6])
pred = predict(bn, learning.test)
table(pred, learning.test[, "A"])
tan = tree.bayes(learning.test, "A")
fitted = bn.fit(tan, learning.test, method = "bayes")
pred = predict(fitted, learning.test)
table(pred, learning.test[, "A"])
plot(bn)
pred
plot(tan)
fitted
tanChicken=tree.bayes(chickenData, "Y_ION")
plot(tanChicken)
chicken.fit<-bn.fit(tanChicken, hickenData, "bayes")
chicken.fit<-bn.fit(tanChicken, chickenData, "bayes")
chicken.fit<-bn.fit(tanChicken, chickenData, "aic")
chicken.fit<-bn.fit(tanChicken, chickenData, "bayes")
pred = predict(chicken.fit, chickenData)
size(pred)
summary(pred)
talbe(pred, chickenData[,"Y_ION"])
table(pred, chickenData[,"Y_ION"])
getwd()
chicken<-read.csv("
seven-peptide-chicken-parser.csv)
;
)
"
)
chicken.data<-read.csv("seven-peptide-chicken-parser.csv")
chicken.data
chicken.data<-read.csv("seven-peptide-chicken-parser.csv")
chicken.data
summary(chicken.data)
?read.csv
chicken.data<-read.csv("seven-peptide-chicken-parser.csv", colClasses=c("factor", "integer", "factor", "factor", "factor", "integer", "integer"))
chicken.data<-read.csv("seven-peptide-chicken-parser.csv", colClasses=c("factor", "integer", "factor", "factor", "factor", "numeric", "numeric"))
summary(chicken.data)
chicken.data$P_MASS
?cut
cut(chicken.data$P_MASS, 50)
cut(chicken.data$P_MASS, 50, ordered_result=TRUE)
cut(chicken.data$P_MASS, 50, ordered_result=TRUE, labels=FALSE)
table(cut(chicken.data$P_MASS, 50, ordered_result=TRUE, labels=FALSE)0
table(cut(chicken.data$P_MASS, 50, ordered_result=TRUE, labels=FALSE))
length(chicken.data$P_MASS)
chicken.data$P_MASS
chicken.data$P_MASS<-cut(chicken.data$P_MASS, 50, ordered_result=TRUE, labels=FALSE)
chicken.data
summary(chicken.data)
chicken.data$P_MZ<-cut(chicken.data$P_MASS, 50, ordered_result=TRUE, labels=FALSE)
summary(chicken.data)
chicken.net<-iamb(chicken.data, test='jc')
?factor
factor(chicken.data$BOND_POSITION)
factor(chicken.data$ION_TYPE)
cbind(factor(chicken.data$ION_TYPE), factor(chicken.data$BOND_POSITION))
cbind(factor(chicken.data$ION_TYPE, levels=names(chicken.data$ION_TYPE)), factor(chicken.data$BOND_POSITION))
cbind(factor(chicken.data$ION_TYPE, levels=levels(chicken.data$ION_TYPE)), factor(chicken.data$BOND_POSITION))
lvels(chicken.data$ION_TYPE)
levels(chicken.data$ION_TYPE)
chicken.data
summary(chicken.data)
is.factor(chicken.data$ION_TYPE)
is.factor(chicken.data$BOND_POSITION)
is.factor(chicken.data$LEFT_AA)
is.factor(chicken.data$RIGHT_AA)
is.factor(chicken.data$P_CHARGE)
is.factor(chicken.data$P_MASS)
is.factor(chicken.data$P_MZ)
chicken.data$P_MASS<-factor(cut(chicken.data$P_MASS, 50, ordered_result=TRUE, labels=FALSE))
is.factor(chicken.data$P_MASS)
summary(chicken.data)
chicken.data<-read.csv("seven-peptide-chicken-parser.csv", colClasses=c("factor", "factor", "factor", "factor", "factor", "factor", "factor"))
summary(chicken.data)
chicken.data<-read.csv("seven-peptide-chicken-parser.csv", colClasses=c("factor", "factor", "factor", "factor", "factor", "numeric", "numeric"))
summary(chicken.data)
chicken.data$P_MASS<-factor(cut(chicken.data$P_MASS, 50, ordered_result=TRUE, labels=FALSE))
chicken.data$P_MZ<-factor(cut(chicken.data$P_MZ, 50, ordered_result=TRUE, labels=FALSE))
summary(chicken.data)
chicken.net<-iamb(chicken.data, test='jc')
chicken.net<-iamb(chicken.data, test='jt')
?ordered
ordered(chicken.data$P_MASS)
chicken.data
summary(chicken.data)
is.ordered(chicken.data$ION_TYPE)
is.ordered(chicken.data$ION_BOND_POSITION)
is.ordered(chicken.data$LEFT_AA)
is.ordered(chicken.data$P_MZ)
chicken.data$P_MZ<-ordered(chicken.data$P_MZ)
is.ordered(chicken.data$P_MZ)
summary(chicken.data)
chicken.data<-ordered(chicken.data)
chicken.data$ION_TYPE<-ordered(chicken.data$ION_TYPE)
summary(chicken.data)
source('~/NetBeansProjects/MSP File Parser/MSP Files/readMSPoutput.incsv.R')
chicken.data<-read.csv("seven-peptide-chicken-parser.csv", colClasses=c("ordinal", "factor", "factor", "factor", "factor", "numeric", "numeric"))
source('~/NetBeansProjects/MSP File Parser/MSP Files/readMSPoutput.incsv.R')
source('~/NetBeansProjects/MSP File Parser/MSP Files/readMSPoutput.incsv.R')
source('~/NetBeansProjects/MSP File Parser/MSP Files/readMSPoutput.incsv.R')
chicken.data<-read.csv("seven-peptide-chicken-parser.csv", colClasses=c("factor", "factor", "factor", "factor", "factor", "numeric", "numeric"))
summary(chicken.data)
chicken.data$P_MASS<-factor(cut(chicken.data$P_MASS, 50, ordered_result=TRUE, labels=FALSE))
chicken.data$P_MZ<-factor(cut(chicken.data$P_MZ, 50, ordered_result=TRUE, labels=FALSE))
chicken.data$ION_TYPE<-ordered(chicken.data$ION_TYPE)
chicken.data$BOND_POSITION<-ordered(chicken.data$BOND_POSITION)
chicken.data$LEFT_AA<-ordered(chicken.data$LEFT_AA)
chicken.data$RIGHT_AA<-ordered(chicken.data$RIGHT_AA)
chicken.data$P_CHARGE<-ordered(chicken.data$P_CHARGE)
chicken.data$P_MASS<-ordered(chicken.data$P_MASS)
chicken.data$P_MZ<-ordered(chicken.data$P_MZ)
summary(chicken.data)
is.ordered(chicken.data$ION_TYPE)
chicken.net<-iamb(chicken.data, test='jt')
plot(chicken.net)
chicken.net<-hc(chicken.net)
chicken.net<-hc(chicken.data)
plot(chicken.net)
chicken.data<-read.csv("seven-peptide-chicken-parser.csv", colClasses=c("factor", "factor", "factor", "factor", "factor", "numeric", "numeric"))
chicken.data$P_MASS<-factor(cut(chicken.data$P_MASS, 50, ordered_result=TRUE, labels=FALSE))
chicken.data$P_MZ<-factor(cut(chicken.data$P_MZ, 50, ordered_result=TRUE, labels=FALSE))
# chicken.data$ION_TYPE<-ordered(chicken.data$ION_TYPE)
# chicken.data$BOND_POSITION<-ordered(chicken.data$BOND_POSITION)
# chicken.data$LEFT_AA<-ordered(chicken.data$LEFT_AA)
# chicken.data$RIGHT_AA<-ordered(chicken.data$RIGHT_AA)
# chicken.data$P_CHARGE<-ordered(chicken.data$P_CHARGE)
# chicken.data$P_MASS<-ordered(chicken.data$P_MASS)
# chicken.data$P_MZ<-ordered(chicken.data$P_MZ)
summary(chicken.data)
chicken.net<-hc(chicken.net)
chicken.net<-hc(chicken.data)
plot(chicken.net)
source('~/NetBeansProjects/MSP File Parser/MSP Files/readMSPoutput.incsv.R')
source('~/NetBeansProjects/MSP File Parser/MSP Files/readMSPoutput.incsv.R')
summary(chicken.data)
chicken.net<-hc(chicken.data)
plot(chicken.net)
chicken.fit<-bn.fit(chicken.net ,chicken.data)
chicken.fit$ION_TYPE
chicken.fit$P_CHARGE
chicken.tan<-tree.bayes(chicken.data, "ION_TYPE")
chicken.fit.tan<-bn.fit(chicken.tan, chicken.data, "bayes")
chicken.pred<- predict(chicken.fit.tan, chicken.data)
summary(chicken.pred)
plot(chicken.tan)
table(chicken.pred, chicken.data[,"ION_TYPE"])
?table
a<-letters[1:3]
a
table(a, sample(a))
b<-sample(a)
b
a
table(a,b)
